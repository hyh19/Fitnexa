// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/sbc.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class SbcBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SbcBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SbcBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>> __sbc_proto_fixed4 =
      _lookup<ffi.Pointer<ffi.Int16>>('_sbc_proto_fixed4');

  ffi.Pointer<ffi.Int16> get _sbc_proto_fixed4 => __sbc_proto_fixed4.value;

  set _sbc_proto_fixed4(ffi.Pointer<ffi.Int16> value) =>
      __sbc_proto_fixed4.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>> _cos_table_fixed_4 =
      _lookup<ffi.Pointer<ffi.Int16>>('cos_table_fixed_4');

  ffi.Pointer<ffi.Int16> get cos_table_fixed_4 => _cos_table_fixed_4.value;

  set cos_table_fixed_4(ffi.Pointer<ffi.Int16> value) =>
      _cos_table_fixed_4.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>> __sbc_proto_fixed8 =
      _lookup<ffi.Pointer<ffi.Int16>>('_sbc_proto_fixed8');

  ffi.Pointer<ffi.Int16> get _sbc_proto_fixed8 => __sbc_proto_fixed8.value;

  set _sbc_proto_fixed8(ffi.Pointer<ffi.Int16> value) =>
      __sbc_proto_fixed8.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>> _cos_table_fixed_8 =
      _lookup<ffi.Pointer<ffi.Int16>>('cos_table_fixed_8');

  ffi.Pointer<ffi.Int16> get cos_table_fixed_8 => _cos_table_fixed_8.value;

  set cos_table_fixed_8(ffi.Pointer<ffi.Int16> value) =>
      _cos_table_fixed_8.value = value;

  /// Constant tables for the use in SIMD optimized analysis filters
  /// Each table consists of two parts:
  /// 1. reordered "proto" table
  /// 2. reordered "cos" table
  ///
  /// Due to non-symmetrical reordering, separate tables for "even"
  /// and "odd" cases are needed
  late final ffi.Pointer<ffi.Pointer<ffi.Int16>>
      _analysis_consts_fixed4_simd_even =
      _lookup<ffi.Pointer<ffi.Int16>>('analysis_consts_fixed4_simd_even');

  ffi.Pointer<ffi.Int16> get analysis_consts_fixed4_simd_even =>
      _analysis_consts_fixed4_simd_even.value;

  set analysis_consts_fixed4_simd_even(ffi.Pointer<ffi.Int16> value) =>
      _analysis_consts_fixed4_simd_even.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>>
      _analysis_consts_fixed4_simd_odd =
      _lookup<ffi.Pointer<ffi.Int16>>('analysis_consts_fixed4_simd_odd');

  ffi.Pointer<ffi.Int16> get analysis_consts_fixed4_simd_odd =>
      _analysis_consts_fixed4_simd_odd.value;

  set analysis_consts_fixed4_simd_odd(ffi.Pointer<ffi.Int16> value) =>
      _analysis_consts_fixed4_simd_odd.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>>
      _analysis_consts_fixed8_simd_even =
      _lookup<ffi.Pointer<ffi.Int16>>('analysis_consts_fixed8_simd_even');

  ffi.Pointer<ffi.Int16> get analysis_consts_fixed8_simd_even =>
      _analysis_consts_fixed8_simd_even.value;

  set analysis_consts_fixed8_simd_even(ffi.Pointer<ffi.Int16> value) =>
      _analysis_consts_fixed8_simd_even.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int16>>
      _analysis_consts_fixed8_simd_odd =
      _lookup<ffi.Pointer<ffi.Int16>>('analysis_consts_fixed8_simd_odd');

  ffi.Pointer<ffi.Int16> get analysis_consts_fixed8_simd_odd =>
      _analysis_consts_fixed8_simd_odd.value;

  set analysis_consts_fixed8_simd_odd(ffi.Pointer<ffi.Int16> value) =>
      _analysis_consts_fixed8_simd_odd.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _sbc_proto_4_40m0 =
      _lookup<ffi.Pointer<ffi.Int32>>('sbc_proto_4_40m0');

  ffi.Pointer<ffi.Int32> get sbc_proto_4_40m0 => _sbc_proto_4_40m0.value;

  set sbc_proto_4_40m0(ffi.Pointer<ffi.Int32> value) =>
      _sbc_proto_4_40m0.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _sbc_proto_4_40m1 =
      _lookup<ffi.Pointer<ffi.Int32>>('sbc_proto_4_40m1');

  ffi.Pointer<ffi.Int32> get sbc_proto_4_40m1 => _sbc_proto_4_40m1.value;

  set sbc_proto_4_40m1(ffi.Pointer<ffi.Int32> value) =>
      _sbc_proto_4_40m1.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _sbc_proto_8_80m0 =
      _lookup<ffi.Pointer<ffi.Int32>>('sbc_proto_8_80m0');

  ffi.Pointer<ffi.Int32> get sbc_proto_8_80m0 => _sbc_proto_8_80m0.value;

  set sbc_proto_8_80m0(ffi.Pointer<ffi.Int32> value) =>
      _sbc_proto_8_80m0.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _sbc_proto_8_80m1 =
      _lookup<ffi.Pointer<ffi.Int32>>('sbc_proto_8_80m1');

  ffi.Pointer<ffi.Int32> get sbc_proto_8_80m1 => _sbc_proto_8_80m1.value;

  set sbc_proto_8_80m1(ffi.Pointer<ffi.Int32> value) =>
      _sbc_proto_8_80m1.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _synmatrix4 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('synmatrix4');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get synmatrix4 => _synmatrix4.value;

  set synmatrix4(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) =>
      _synmatrix4.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _synmatrix8 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('synmatrix8');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get synmatrix8 => _synmatrix8.value;

  set synmatrix8(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) =>
      _synmatrix8.value = value;

  /// A2DP specification: Appendix B, page 69
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int>>> _sbc_offset4 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int>>>('sbc_offset4');

  ffi.Pointer<ffi.Pointer<ffi.Int>> get sbc_offset4 => _sbc_offset4.value;

  set sbc_offset4(ffi.Pointer<ffi.Pointer<ffi.Int>> value) =>
      _sbc_offset4.value = value;

  /// A2DP specification: Appendix B, page 69
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int>>> _sbc_offset8 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int>>>('sbc_offset8');

  ffi.Pointer<ffi.Pointer<ffi.Int>> get sbc_offset8 => _sbc_offset8.value;

  set sbc_offset8(ffi.Pointer<ffi.Pointer<ffi.Int>> value) =>
      _sbc_offset8.value = value;

  /// @brief 压缩比：6:1初始化
  /// @param[in] sbc    创建sbc属性
  /// @param[in] flag:
  ///
  /// @retval 0     		 成功
  /// @retval -EIO			 未创建sbc属性
  /// @retval -ENOMEM 		动态申请内存指针为空
  int sbc_six_one_init(
    ffi.Pointer<sbc_t> sbc,
    int flags,
  ) {
    return _sbc_six_one_init(
      sbc,
      flags,
    );
  }

  late final _sbc_six_one_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sbc_t>, ffi.UnsignedLong)>>('sbc_six_one_init');
  late final _sbc_six_one_init =
      _sbc_six_one_initPtr.asFunction<int Function(ffi.Pointer<sbc_t>, int)>();

  /// @brief 压缩比：8:1初始化
  /// @param[in] sbc    创建sbc属性
  /// @param[in] flag:
  ///
  /// @retval 0     		 成功
  /// @retval -EIO			 未创建sbc属性
  /// @retval -ENOMEM 		动态申请内存指针为空
  int sbc_eight_one_init(
    ffi.Pointer<sbc_t> sbc,
    int flags,
  ) {
    return _sbc_eight_one_init(
      sbc,
      flags,
    );
  }

  late final _sbc_eight_one_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sbc_t>, ffi.UnsignedLong)>>('sbc_eight_one_init');
  late final _sbc_eight_one_init = _sbc_eight_one_initPtr
      .asFunction<int Function(ffi.Pointer<sbc_t>, int)>();

  int sbc_reinit(
    ffi.Pointer<sbc_t> sbc,
    int flags,
  ) {
    return _sbc_reinit(
      sbc,
      flags,
    );
  }

  late final _sbc_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sbc_t>, ffi.UnsignedLong)>>('sbc_reinit');
  late final _sbc_reinit =
      _sbc_reinitPtr.asFunction<int Function(ffi.Pointer<sbc_t>, int)>();

  int sbc_init_msbc(
    ffi.Pointer<sbc_t> sbc,
    int flags,
  ) {
    return _sbc_init_msbc(
      sbc,
      flags,
    );
  }

  late final _sbc_init_msbcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sbc_t>, ffi.UnsignedLong)>>('sbc_init_msbc');
  late final _sbc_init_msbc =
      _sbc_init_msbcPtr.asFunction<int Function(ffi.Pointer<sbc_t>, int)>();

  int sbc_init_a2dp(
    ffi.Pointer<sbc_t> sbc,
    int flags,
    ffi.Pointer<ffi.Void> conf,
    int conf_len,
  ) {
    return _sbc_init_a2dp(
      sbc,
      flags,
      conf,
      conf_len,
    );
  }

  late final _sbc_init_a2dpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sbc_t>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('sbc_init_a2dp');
  late final _sbc_init_a2dp = _sbc_init_a2dpPtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, int, ffi.Pointer<ffi.Void>, int)>();

  int sbc_reinit_a2dp(
    ffi.Pointer<sbc_t> sbc,
    int flags,
    ffi.Pointer<ffi.Void> conf,
    int conf_len,
  ) {
    return _sbc_reinit_a2dp(
      sbc,
      flags,
      conf,
      conf_len,
    );
  }

  late final _sbc_reinit_a2dpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sbc_t>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('sbc_reinit_a2dp');
  late final _sbc_reinit_a2dp = _sbc_reinit_a2dpPtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, int, ffi.Pointer<ffi.Void>, int)>();

  int sbc_parse(
    ffi.Pointer<sbc_t> sbc,
    ffi.Pointer<ffi.Void> input,
    int input_len,
  ) {
    return _sbc_parse(
      sbc,
      input,
      input_len,
    );
  }

  late final _sbc_parsePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<sbc_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('sbc_parse');
  late final _sbc_parse = _sbc_parsePtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, ffi.Pointer<ffi.Void>, int)>();

  /// Decodes ONE input block into ONE output block
  int sbc_decode(
    ffi.Pointer<sbc_t> sbc,
    ffi.Pointer<ffi.Void> input,
    int input_len,
    ffi.Pointer<ffi.Void> output,
    int output_len,
    ffi.Pointer<ffi.Size> written,
  ) {
    return _sbc_decode(
      sbc,
      input,
      input_len,
      output,
      output_len,
      written,
    );
  }

  late final _sbc_decodePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<sbc_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('sbc_decode');
  late final _sbc_decode = _sbc_decodePtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Size>)>();

  /// Encodes ONE input block into ONE output block
  int sbc_encode(
    ffi.Pointer<sbc_t> sbc,
    ffi.Pointer<ffi.Void> input,
    int input_len,
    ffi.Pointer<ffi.Void> output,
    int output_len,
    ffi.Pointer<ssize_t> written,
  ) {
    return _sbc_encode(
      sbc,
      input,
      input_len,
      output,
      output_len,
      written,
    );
  }

  late final _sbc_encodePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<sbc_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ssize_t>)>>('sbc_encode');
  late final _sbc_encode = _sbc_encodePtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ssize_t>)>();

  /// Returns the output block size in bytes
  int sbc_get_frame_length(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_get_frame_length(
      sbc,
    );
  }

  late final _sbc_get_frame_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<sbc_t>)>>(
          'sbc_get_frame_length');
  late final _sbc_get_frame_length =
      _sbc_get_frame_lengthPtr.asFunction<int Function(ffi.Pointer<sbc_t>)>();

  /// Returns the time one input/output block takes to play in msec
  int sbc_get_frame_duration(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_get_frame_duration(
      sbc,
    );
  }

  late final _sbc_get_frame_durationPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<sbc_t>)>>(
          'sbc_get_frame_duration');
  late final _sbc_get_frame_duration =
      _sbc_get_frame_durationPtr.asFunction<int Function(ffi.Pointer<sbc_t>)>();

  /// Returns the input block size in bytes
  int sbc_get_codesize(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_get_codesize(
      sbc,
    );
  }

  late final _sbc_get_codesizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<sbc_t>)>>(
          'sbc_get_codesize');
  late final _sbc_get_codesize =
      _sbc_get_codesizePtr.asFunction<int Function(ffi.Pointer<sbc_t>)>();

  ffi.Pointer<ffi.Char> sbc_get_implementation_info(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_get_implementation_info(
      sbc,
    );
  }

  late final _sbc_get_implementation_infoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sbc_t>)>>(
      'sbc_get_implementation_info');
  late final _sbc_get_implementation_info = _sbc_get_implementation_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sbc_t>)>();

  void sbc_finish(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_finish(
      sbc,
    );
  }

  late final _sbc_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sbc_t>)>>(
          'sbc_finish');
  late final _sbc_finish =
      _sbc_finishPtr.asFunction<void Function(ffi.Pointer<sbc_t>)>();

  void pcm_to_sbc(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> output,
    int msbc,
  ) {
    return _pcm_to_sbc(
      filename,
      output,
      msbc,
    );
  }

  late final _pcm_to_sbcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('pcm_to_sbc');
  late final _pcm_to_sbc = _pcm_to_sbcPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void sbc_to_pcm(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> output,
    int msbc,
  ) {
    return _sbc_to_pcm(
      filename,
      output,
      msbc,
    );
  }

  late final _sbc_to_pcmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('sbc_to_pcm');
  late final _sbc_to_pcm = _sbc_to_pcmPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void sbc_init_primitives(
    ffi.Pointer<sbc_encoder_state> state,
  ) {
    return _sbc_init_primitives(
      state,
    );
  }

  late final _sbc_init_primitivesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<sbc_encoder_state>)>>(
      'sbc_init_primitives');
  late final _sbc_init_primitives = _sbc_init_primitivesPtr
      .asFunction<void Function(ffi.Pointer<sbc_encoder_state>)>();

  void sbc_decode_init(
    ffi.Pointer<sbc_t> sbc,
    int msbc,
  ) {
    return _sbc_decode_init(
      sbc,
      msbc,
    );
  }

  late final _sbc_decode_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sbc_t>, ffi.Int)>>(
      'sbc_decode_init');
  late final _sbc_decode_init =
      _sbc_decode_initPtr.asFunction<void Function(ffi.Pointer<sbc_t>, int)>();

  void my_sbc_init() {
    return _my_sbc_init();
  }

  late final _my_sbc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('my_sbc_init');
  late final _my_sbc_init = _my_sbc_initPtr.asFunction<void Function()>();

  int sbc_decoder_decode(
    ffi.Pointer<sbc_t> sbc,
    ffi.Pointer<ffi.Char> input,
    int input_len,
    ffi.Pointer<ffi.Char> output,
    int output_len,
    ffi.Pointer<ffi.Size> written,
  ) {
    return _sbc_decoder_decode(
      sbc,
      input,
      input_len,
      output,
      output_len,
      written,
    );
  }

  late final _sbc_decoder_decodePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<sbc_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('sbc_decoder_decode');
  late final _sbc_decoder_decode = _sbc_decoder_decodePtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Size>)>();

  int my_decoder_decode(
    ffi.Pointer<ffi.Char> input,
    int input_len,
    ffi.Pointer<ffi.Char> output,
    int output_len,
    ffi.Pointer<ffi.Size> written,
  ) {
    return _my_decoder_decode(
      input,
      input_len,
      output,
      output_len,
      written,
    );
  }

  late final _my_decoder_decodePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('my_decoder_decode');
  late final _my_decoder_decode = _my_decoder_decodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Size>)>();

  void sbc_decoder_uninit(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_decoder_uninit(
      sbc,
    );
  }

  late final _sbc_decoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sbc_t>)>>(
          'sbc_decoder_uninit');
  late final _sbc_decoder_uninit =
      _sbc_decoder_uninitPtr.asFunction<void Function(ffi.Pointer<sbc_t>)>();

  void sbc_encode_init(
    ffi.Pointer<sbc_t> sbc,
    int msbc,
  ) {
    return _sbc_encode_init(
      sbc,
      msbc,
    );
  }

  late final _sbc_encode_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sbc_t>, ffi.Int)>>(
      'sbc_encode_init');
  late final _sbc_encode_init =
      _sbc_encode_initPtr.asFunction<void Function(ffi.Pointer<sbc_t>, int)>();

  int sbc_encoder_encode(
    ffi.Pointer<sbc_t> sbc,
    ffi.Pointer<ffi.Void> input,
    int input_len,
    ffi.Pointer<ffi.Void> output,
    int output_len,
    ffi.Pointer<ssize_t> written,
  ) {
    return _sbc_encoder_encode(
      sbc,
      input,
      input_len,
      output,
      output_len,
      written,
    );
  }

  late final _sbc_encoder_encodePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<sbc_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ssize_t>)>>('sbc_encoder_encode');
  late final _sbc_encoder_encode = _sbc_encoder_encodePtr.asFunction<
      int Function(ffi.Pointer<sbc_t>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ssize_t>)>();

  int my_encoder_encode(
    ffi.Pointer<ffi.Char> input,
    int input_len,
    ffi.Pointer<ffi.Char> output,
    int output_len,
    ffi.Pointer<ssize_t> written,
  ) {
    return _my_encoder_encode(
      input,
      input_len,
      output,
      output_len,
      written,
    );
  }

  late final _my_encoder_encodePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ssize_t>)>>('my_encoder_encode');
  late final _my_encoder_encode = _my_encoder_encodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ssize_t>)>();

  void sbc_encoder_uninit(
    ffi.Pointer<sbc_t> sbc,
  ) {
    return _sbc_encoder_uninit(
      sbc,
    );
  }

  late final _sbc_encoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sbc_t>)>>(
          'sbc_encoder_uninit');
  late final _sbc_encoder_uninit =
      _sbc_encoder_uninitPtr.asFunction<void Function(ffi.Pointer<sbc_t>)>();

  int sbc_malloc() {
    return _sbc_malloc();
  }

  late final _sbc_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sbc_malloc');
  late final _sbc_malloc = _sbc_mallocPtr.asFunction<int Function()>();

  int sbc_free() {
    return _sbc_free();
  }

  late final _sbc_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sbc_free');
  late final _sbc_free = _sbc_freePtr.asFunction<int Function()>();
}

class sbc_encoder_state extends ffi.Struct {
  @ffi.Int()
  external int position;

  /// Number of consecutive blocks handled by the encoder
  @ffi.Uint8()
  external int increment;

  @ffi.Array.multi([2, 328])
  external ffi.Array<ffi.Array<ffi.Int16>> X;

  /// Polyphase analysis filter for 4 subbands configuration,
  /// it handles "increment" blocks at once
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sbc_encoder_state> state,
              ffi.Pointer<ffi.Int16> x,
              ffi.Pointer<ffi.Int32> out,
              ffi.Int out_stride)>> sbc_analyze_4s;

  /// Polyphase analysis filter for 8 subbands configuration,
  /// it handles "increment" blocks at once
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sbc_encoder_state> state,
              ffi.Pointer<ffi.Int16> x,
              ffi.Pointer<ffi.Int32> out,
              ffi.Int out_stride)>> sbc_analyze_8s;

  /// Process input data (deinterleave, endian conversion, reordering),
  /// depending on the number of subbands and input data byte order
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int position,
              ffi.Pointer<ffi.Uint8> pcm,
              ffi.Pointer<ffi.Pointer<ffi.Int16>> X,
              ffi.Int nsamples,
              ffi.Int nchannels)>> sbc_enc_process_input_4s_le;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int position,
              ffi.Pointer<ffi.Uint8> pcm,
              ffi.Pointer<ffi.Pointer<ffi.Int16>> X,
              ffi.Int nsamples,
              ffi.Int nchannels)>> sbc_enc_process_input_4s_be;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int position,
              ffi.Pointer<ffi.Uint8> pcm,
              ffi.Pointer<ffi.Pointer<ffi.Int16>> X,
              ffi.Int nsamples,
              ffi.Int nchannels)>> sbc_enc_process_input_8s_le;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int position,
              ffi.Pointer<ffi.Uint8> pcm,
              ffi.Pointer<ffi.Pointer<ffi.Int16>> X,
              ffi.Int nsamples,
              ffi.Int nchannels)>> sbc_enc_process_input_8s_be;

  /// Scale factors calculation
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> sb_sample_f,
              ffi.Pointer<ffi.Pointer<ffi.Uint32>> scale_factor,
              ffi.Int blocks,
              ffi.Int channels,
              ffi.Int subbands)>> sbc_calc_scalefactors;

  /// Scale factors calculation with joint stereo support
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> sb_sample_f,
              ffi.Pointer<ffi.Pointer<ffi.Uint32>> scale_factor,
              ffi.Int blocks,
              ffi.Int subbands)>> sbc_calc_scalefactors_j;

  external ffi.Pointer<ffi.Char> implementation_info;
}

class sbc_struct extends ffi.Struct {
  @ffi.UnsignedLong()
  external int flags;

  @ffi.Uint8()
  external int frequency;

  @ffi.Uint8()
  external int blocks;

  @ffi.Uint8()
  external int subbands;

  @ffi.Uint8()
  external int mode;

  @ffi.Uint8()
  external int allocation;

  @ffi.Uint8()
  external int bitpool;

  @ffi.Uint8()
  external int endian;

  external ffi.Pointer<ffi.Void> priv;

  external ffi.Pointer<ffi.Void> priv_alloc_base;
}

typedef sbc_t = sbc_struct;
typedef ssize_t = ffi.Int;

const int SBC_FREQ_16000 = 0;

const int SBC_FREQ_32000 = 1;

const int SBC_FREQ_44100 = 2;

const int SBC_FREQ_48000 = 3;

const int SBC_BLK_4 = 0;

const int SBC_BLK_8 = 1;

const int SBC_BLK_12 = 2;

const int SBC_BLK_16 = 3;

const int SBC_MODE_MONO = 0;

const int SBC_MODE_DUAL_CHANNEL = 1;

const int SBC_MODE_STEREO = 2;

const int SBC_MODE_JOINT_STEREO = 3;

const int SBC_AM_LOUDNESS = 0;

const int SBC_AM_SNR = 1;

const int SBC_SB_4 = 0;

const int SBC_SB_8 = 1;

const int SBC_LE = 0;

const int SBC_BE = 1;

const int SBC_X_BUFFER_SIZE = 328;

const int SCALE_OUT_BITS = 15;

const int SBCDEC_FIXED_EXTRA_BITS = 2;

const int SBC_ALIGN_BITS = 4;

const int SBC_ALIGN_MASK = 15;

const int SCALE_SPROTO4_TBL = 12;

const int SCALE_SPROTO8_TBL = 14;

const int SCALE_NPROTO4_TBL = 11;

const int SCALE_NPROTO8_TBL = 11;

const int SCALE4_STAGED1_BITS = 15;

const int SCALE4_STAGED2_BITS = 16;

const int SCALE8_STAGED1_BITS = 15;

const int SCALE8_STAGED2_BITS = 16;

const int SBC_FIXED_EXTRA_BITS = 0;

const int SBC_PROTO_FIXED4_SCALE = 16;

const int SBC_COS_TABLE_FIXED4_SCALE = 15;

const int SBC_PROTO_FIXED8_SCALE = 16;

const int SBC_COS_TABLE_FIXED8_SCALE = 15;
