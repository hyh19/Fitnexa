

part of creek_blue;

class CreekTest{
  ///一次性创建所有数据
  static createAllData(){
      createHeartRateData();
    createSleepData();
    createStressData();
    createNoiseData();
    createActivatyData();
    createSpoData();
    createSportData();

   //  List<int> a = [1, 1, 106, 0, 0, 0, 5, 0, 0, 231, 7, 6, 26, 9, 2, 25, 244, 4, 0, 0, 0, 0, 0, 0, 0, 103, 118, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 81, 0, 0, 0, 5, 31, 0, 0, 159, 0, 55, 2, 17, 88, 69, 169, 8, 115, 243, 113, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 253, 0, 0, 0, 253, 0, 0, 0, 122, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 253, 0, 0, 0, 102, 104, 106, 107, 107, 107, 105, 105, 107, 107, 110, 111, 113, 114, 112, 112, 111, 109, 107, 105, 102, 101, 100, 102, 104, 105, 105, 105, 105, 104, 104, 103, 102, 102, 102, 103, 103, 104, 104, 104, 104, 105, 104, 103, 102, 101, 100, 99, 100, 101, 103, 104, 105, 104, 103, 103, 101, 99, 98, 98, 99, 101, 102, 103, 103, 105, 106, 104, 103, 104, 104, 102, 101, 102, 104, 104, 104, 101, 102, 102, 102, 104, 108, 108, 109, 113, 116, 116, 115, 114, 112, 110, 109, 108, 106, 104, 102, 100, 99, 101, 102, 103, 104, 105, 105, 103, 102, 104, 104, 102, 100, 98, 99, 100, 101, 102, 103, 103, 101, 99, 99, 97, 99, 100, 101, 102, 103, 102, 100, 99, 99, 100, 102, 102, 104, 105, 104, 103, 101, 99, 97, 96, 98, 98, 99, 99, 98, 98, 98, 98, 98, 99, 101, 102, 104, 105, 104, 104, 102, 103, 103, 102, 104, 105, 105, 106, 107, 109, 108, 106, 107, 109, 109, 108, 106, 104, 105, 107, 106, 105, 104, 104, 106, 107, 106, 104, 102, 101, 100, 98, 97, 98, 100, 101, 102, 103, 103, 104, 103, 101, 101, 100, 100, 100, 98, 96, 96, 97, 97, 97, 96, 97, 98, 97, 96, 97, 98, 99, 97, 96, 97, 98, 98, 100, 100, 99, 101, 101, 100, 98, 98, 97, 96, 99, 100, 101, 102, 104, 105, 106, 109, 109, 110, 111, 111, 111, 111, 113, 114, 114, 115, 116, 117, 3, 1, 16, 0, 0, 0, 146, 7, 64, 8, 117, 8, 81, 9, 60, 9, 78, 9, 182, 9, 206, 8, 4, 1, 250, 1, 0, 0, 93, 0, 86, 0, 86, 0, 103, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 88, 0, 93, 0, 98, 0, 5, 1, 16, 0, 0, 0, 184, 0, 169, 0, 165, 0, 150, 0, 152, 0, 150, 0, 144, 0, 159, 0, 6, 1, 250, 1, 0, 0, 77, 0, 76, 0, 76, 0, 78, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 96, 0, 109, 0, 107, 0, 7, 1, 208, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 6, 90, 1, 183, 167, 203, 6, 14, 6, 90, 1, 183, 167, 203, 6, 14, 6, 90, 1, 183, 167, 203, 6, 14, 6, 90, 1, 182, 167, 203, 6, 13, 6, 90, 1, 181, 167, 203, 6, 13, 6, 90, 1, 180, 167, 203, 6, 11, 6, 90, 1, 177, 167, 203, 6, 8, 6, 90, 1, 171, 167, 203, 6, 235, 5, 90, 1, 113, 167, 203, 6, 177, 5, 90, 1, 241, 166, 203, 6, 66, 5, 90, 1, 227, 165, 203, 6, 50, 4, 90, 1, 13, 163, 203, 6, 180, 3, 90, 1, 173, 161, 203, 6, 118, 3, 90, 1, 2, 161, 203, 6, 77, 3, 90, 1, 144, 160, 203, 6, 44, 3, 90, 1, 83, 160, 203, 6, 255, 2, 90, 1, 91, 160, 203, 6, 191, 2, 90, 1, 132, 160, 203, 6, 125, 2, 90, 1, 182, 160, 203, 6, 39, 2, 90, 1, 252, 160, 203, 6, 201, 1, 90, 1, 74, 161, 203, 6, 101, 1, 90, 1, 127, 161, 203, 6, 68, 1, 90, 1, 83, 161, 203, 6, 36, 1, 90, 1, 14, 161, 203, 6, 7, 1, 90, 1, 245, 160, 203, 6, 219, 0, 90, 1, 12, 161, 203, 6, 157, 0, 90, 1, 71, 161, 203, 6, 66, 0, 90, 1, 152, 161, 203, 6, 211, 255, 89, 1, 0, 162, 203, 6, 16, 255, 89, 1, 186, 162, 203, 6, 109, 254, 89, 1, 81, 163, 203, 6, 215, 253, 89, 1, 225, 163, 203, 6, 88, 253, 89, 1, 101, 164, 203, 6, 218, 252, 89, 1, 240, 164, 203, 6, 92, 252, 89, 1, 148, 165, 203, 6, 251, 251, 89, 1, 36, 166, 203, 6, 177, 251, 89, 1, 161, 166, 203, 6, 99, 251, 89, 1, 58, 167, 203, 6, 13, 251, 89, 1, 224, 167, 203, 6, 177, 250, 89, 1, 143, 168, 203, 6, 85, 250, 89, 1, 63, 169, 203, 6, 250, 249, 89, 1, 249, 169, 203, 6, 162, 249, 89, 1, 155, 170, 203, 6, 90, 249, 89, 1, 24, 171, 203, 6, 21, 249, 89, 1, 118, 171, 203, 6, 193, 248, 89, 1, 231, 171, 203, 6, 91, 248, 89, 1, 101, 172, 203, 6, 231, 247, 89, 1, 219, 172, 203, 6, 101, 247, 89, 1, 98, 173, 203, 6, 231, 246, 89, 1, 215, 173, 203, 6, 122, 246, 89, 1, 53, 174, 203, 6, 15, 246, 89, 1, 158, 174, 203, 6, 154, 245, 89, 1, 20, 175, 203, 6, 19, 245, 89, 1, 148, 175, 203, 6, 132, 244, 89, 1, 20, 176, 203, 6, 244, 243, 89, 1, 146, 176, 203, 6, 82, 243, 89, 1, 19, 177, 203, 6, 164, 242, 89, 1, 142, 177, 203, 6, 252, 241, 89, 1, 249, 177, 203, 6, 109, 241, 89, 1, 81, 178, 203, 6, 218, 240, 89, 1, 177, 178, 203, 6, 85, 240, 89, 1, 7, 179, 203, 6, 219, 239, 89, 1, 88, 179, 203, 6, 94, 239, 89, 1, 167, 179, 203, 6, 226, 238, 89, 1, 234, 179, 203, 6, 103, 238, 89, 1, 47, 180, 203, 6, 254, 237, 89, 1, 114, 180, 203, 6, 182, 237, 89, 1, 159, 180, 203, 6, 137, 237, 89, 1, 191, 180, 203, 6, 72, 237, 89, 1, 239, 180, 203, 6, 13, 237, 89, 1, 24, 181, 203, 6, 203, 236, 89, 1, 72, 181, 203, 6, 134, 236, 89, 1, 121, 181, 203, 6, 53, 236, 89, 1, 185, 181, 203, 6, 208, 235, 89, 1, 5, 182, 203, 6, 26, 235, 89, 1, 142, 182, 203, 6, 105, 234, 89, 1, 252, 182, 203, 6, 204, 233, 89, 1, 90, 183, 203, 6, 53, 233, 89, 1, 184, 183, 203, 6, 198, 232, 89, 1, 247, 183, 203, 6, 110, 232, 89, 1, 50, 184, 203, 6, 2, 232, 89, 1, 128, 184, 203, 6, 148, 231, 89, 1, 201, 184, 203, 6, 39, 231, 89, 1, 15, 185, 203, 6, 198, 230, 89, 1, 81, 185, 203, 6, 118, 230, 89, 1, 134, 185, 203, 6, 53, 230, 89, 1, 175, 185, 203, 6, 1, 230, 89, 1, 207, 185, 203, 6, 209, 229, 89, 1, 251, 185, 203, 6, 139, 229, 89, 1, 52, 186, 203, 6, 43, 229, 89, 1, 120, 186, 203, 6, 139, 228, 89, 1, 230, 186, 203, 6, 195, 227, 89, 1, 109, 187, 203, 6, 20, 227, 89, 1, 226, 187, 203, 6, 93, 226, 89, 1, 98, 188, 203, 6, 197, 225, 89, 1, 203, 188, 203, 6, 62, 225, 89, 1, 40, 189, 203, 6, 206, 224, 89, 1, 115, 189, 203, 6, 114, 224, 89, 1, 139, 189, 203, 6, 16, 224, 89, 1, 157, 189, 203, 6, 178, 223, 89, 1, 195, 189, 203, 6, 90, 223, 89, 1, 252, 189, 203, 6, 252, 222, 89, 1, 51, 190, 203, 6, 152, 222, 89, 1, 108, 190, 203, 6, 53, 222, 89, 1, 174, 190, 203, 6, 214, 221, 89, 1, 237, 190, 203, 6, 101, 221, 89, 1, 49, 191, 203, 6, 237, 220, 89, 1, 103, 191, 203, 6, 134, 220, 89, 1, 136, 191, 203, 6, 80, 220, 89, 1, 155, 191, 203, 6, 42, 220, 89, 1, 177, 191, 203, 6, 4, 220, 89, 1, 169, 191, 203, 6, 228, 219, 89, 1, 133, 191, 203, 6, 204, 219, 89, 1, 85, 191, 203, 6, 183, 219, 89, 1, 23, 191, 203, 6, 160, 219, 89, 1, 210, 190, 203, 6, 140, 219, 89, 1, 126, 190, 203, 6, 134, 219, 89, 1, 41, 190, 203, 6, 121, 219, 89, 1, 224, 189, 203, 6, 98, 219, 89, 1, 154, 189, 203, 6, 75, 219, 89, 1, 81, 189, 203, 6, 67, 219, 89, 1, 13, 189, 203, 6, 74, 219, 89, 1, 196, 188, 203, 6, 71, 219, 89, 1, 95, 188, 203, 6, 66, 219, 89, 1, 229, 187, 203, 6, 55, 219, 89, 1, 57, 187, 203, 6, 31, 219, 89, 1, 143, 186, 203, 6, 7, 219, 89, 1, 35, 186, 203, 6, 235, 218, 89, 1, 208, 185, 203, 6, 209, 218, 89, 1, 141, 185, 203, 6, 157, 218, 89, 1, 74, 185, 203, 6, 116, 218, 89, 1, 44, 185, 203, 6, 73, 218, 89, 1, 22, 185, 203, 6, 23, 218, 89, 1, 236, 184, 203, 6, 234, 217, 89, 1, 156, 184, 203, 6, 193, 217, 89, 1, 41, 184, 203, 6, 149, 217, 89, 1, 163, 183, 203, 6, 75, 217, 89, 1, 202, 182, 203, 6, 2, 217, 89, 1, 36, 182, 203, 6, 175, 216, 89, 1, 150, 181, 203, 6, 72, 216, 89, 1, 7, 181, 203, 6, 220, 215, 89, 1, 116, 180, 203, 6, 110, 215, 89, 1, 232, 179, 203, 6, 251, 214, 89, 1, 82, 179, 203, 6, 130, 214, 89, 1, 185, 178, 203, 6, 10, 214, 89, 1, 43, 178, 203, 6, 132, 213, 89, 1, 138, 177, 203, 6, 4, 213, 89, 1, 233, 176, 203, 6, 140, 212, 89, 1, 83, 176, 203, 6, 20, 212, 89, 1, 179, 175, 203, 6, 160, 211, 89, 1, 4, 175, 203, 6, 41, 211, 89, 1, 91, 174, 203, 6, 186, 210, 89, 1, 195, 173, 203, 6, 90, 210, 89, 1, 76, 173, 203, 6, 20, 210, 89, 1, 248, 172, 203, 6, 227, 209, 89, 1, 179, 172, 203, 6, 199, 209, 89, 1, 100, 172, 203, 6, 176, 209, 89, 1, 45, 172, 203, 6, 153, 209, 89, 1, 32, 172, 203, 6, 145, 209, 89, 1, 28, 172, 203, 6, 136, 209, 89, 1, 28, 172, 203, 6, 116, 209, 89, 1, 35, 172, 203, 6, 97, 209, 89, 1, 46, 172, 203, 6, 84, 209, 89, 1, 54, 172, 203, 6, 76, 209, 89, 1, 61, 172, 203, 6, 69, 209, 89, 1, 66, 172, 203, 6, 65, 209, 89, 1, 70, 172, 203, 6, 62, 209, 89, 1, 73, 172, 203, 6, 60, 209, 89, 1, 75, 172, 203, 6, 59, 209, 89, 1, 77, 172, 203, 6, 58, 209, 89, 1, 79, 172, 203, 6, 57, 209, 89, 1, 79, 172, 203, 6, 57, 209, 89, 1, 81, 172, 203, 6, 56, 209, 89, 1, 84, 172, 203, 6, 53, 209, 89, 1, 89, 172, 203, 6, 49, 209, 89, 1, 96, 172, 203, 6, 249, 208, 89, 1, 174, 172, 203, 6, 183, 208, 89, 1, 1, 173, 203, 6, 79, 208, 89, 1, 124, 173, 203, 6, 143, 207, 89, 1, 80, 174, 203, 6, 174, 206, 89, 1, 50, 175, 203, 6, 24, 206, 89, 1, 191, 175, 203, 6, 173, 205, 89, 1, 42, 176, 203, 6, 88, 205, 89, 1, 127, 176, 203, 6, 16, 205, 89, 1, 186, 176, 203, 6, 187, 204, 89, 1, 255, 176, 203, 6, 78, 204, 89, 1, 91, 177, 203, 6, 210, 203, 89, 1, 209, 177, 203, 6, 84, 203, 89, 1, 92, 178, 203, 6, 217, 202, 89, 1, 221, 178, 203, 6, 108, 202, 89, 1, 70, 179, 203, 6, 14, 202, 89, 1, 162, 179, 203, 6, 168, 201, 89, 1, 12, 180, 203, 6, 50, 201, 89, 1, 125, 180, 203, 6, 184, 200, 89, 1, 227, 180, 203, 6, 64, 200, 89, 1, 64, 181, 203, 6, 212, 199, 89, 1, 151, 181, 203, 6, 117, 199, 89, 1, 232, 181, 203, 6, 33, 199, 89, 1, 53, 182, 203, 6, 212, 198, 89, 1, 129, 182, 203, 6, 140, 198, 89, 1, 197, 182, 203, 6, 80, 198, 89, 1, 253, 182, 203, 6, 31, 198, 89, 1, 45, 183, 203, 6, 239, 197, 89, 1, 88, 183, 203, 6, 170, 197, 89, 1, 147, 183, 203, 6, 87, 197, 89, 1, 220, 183, 203, 6, 252, 196, 89, 1, 32, 184, 203, 6, 127, 196, 89, 1, 119, 184, 203, 6, 66, 196, 89, 1, 177, 184, 203, 6, 36, 196, 89, 1, 202, 184, 203, 6, 4, 196, 89, 1, 222, 184, 203, 6, 214, 195, 89, 1, 3, 185, 203, 6, 169, 195, 89, 1, 63, 185, 203, 6, 110, 195, 89, 1, 143, 185, 203, 6, 17, 195, 89, 1, 235, 185, 203, 6, 119, 194, 89, 1, 113, 186, 203, 6, 194, 193, 89, 1, 24, 187, 203, 6, 19, 193, 89, 1, 190, 187, 203, 6, 104, 192, 89, 1, 90, 188, 203, 6, 196, 191, 89, 1, 234, 188, 203, 6, 32, 191, 89, 1, 119, 189, 203, 6, 119, 190, 89, 1, 253, 189, 203, 6, 207, 189, 89, 1, 125, 190, 203, 6, 45, 189, 89, 1, 248, 190, 203, 6, 157, 188, 89, 1, 117, 191, 203, 6, 36, 188, 89, 1, 227, 191, 203, 6, 212, 187, 89, 1, 38, 192, 203, 6, 178, 187, 89, 1, 71, 192, 203, 6, 143, 187, 89, 1, 111, 192, 203, 6, 108, 187, 89, 1, 150, 192, 203, 6, 53, 187, 89, 1, 202, 192, 203, 6, 236, 186, 89, 1, 22, 193, 203, 6, 141, 186, 89, 1, 118, 193, 203, 6, 245, 185, 89, 1, 3, 194, 203, 6, 64, 185, 89, 1, 165, 194, 203, 6, 150, 184, 89, 1, 59, 195, 203, 6, 245, 183, 89, 1, 201, 195, 203, 6, 94, 183, 89, 1, 72, 196, 203, 6, 199, 182, 89, 1, 202, 196, 203, 6, 49, 182, 89, 1, 75, 197, 203, 6, 154, 181, 89, 1, 206, 197, 203, 6, 255, 180, 89, 1, 87, 198, 203, 6, 98, 180, 89, 1, 220, 198, 203, 6, 198, 179, 89, 1, 88, 199, 203, 6, 57, 179, 89, 1, 206, 199, 203, 6, 212, 178, 89, 1, 43, 200, 203, 6, 126, 178, 89, 1, 115, 200, 203, 6, 17, 178, 89, 1, 205, 200, 203, 6, 162, 177, 89, 1, 47, 201, 203, 6, 52, 177, 89, 1, 142, 201, 203, 6, 186, 176, 89, 1, 244, 201, 203, 6, 64, 176, 89, 1, 108, 202, 203, 6, 191, 175, 89, 1, 240, 202, 203, 6, 50, 175, 89, 1, 118, 203, 203, 6, 160, 174, 89, 1, 248, 203, 203, 6, 247, 173, 89, 1, 137, 204, 203, 6, 74, 173, 89, 1, 14, 205, 203, 6, 175, 172, 89, 1, 141, 205, 203, 6, 23, 172, 89, 1, 18, 206, 203, 6, 127, 171, 89, 1, 145, 206, 203, 6, 244, 170, 89, 1, 255, 206, 203, 6, 126, 170, 89, 1, 84, 207, 203, 6, 37, 170, 89, 1, 147, 207, 203, 6, 202, 169, 89, 1, 218, 207, 203, 6, 122, 169, 89, 1, 34, 208, 203, 6, 48, 169, 89, 1, 112, 208, 203, 6, 217, 168, 89, 1, 189, 208, 203, 6, 119, 168, 89, 1, 11, 209, 203, 6, 11, 168, 89, 1, 94, 209, 203, 6, 160, 167, 89, 1, 176, 209, 203, 6, 70, 167, 89, 1, 252, 209, 203, 6, 249, 166, 89, 1, 64, 210, 203, 6, 181, 166, 89, 1, 125, 210, 203, 6, 123, 166, 89, 1, 179, 210, 203, 6, 47, 166, 89, 1, 237, 210, 203, 6, 226, 165, 89, 1, 31, 211, 203, 6, 139, 165, 89, 1, 87, 211, 203, 6, 16, 165, 89, 1, 171, 211, 203, 6, 134, 164, 89, 1, 13, 212, 203, 6, 23, 164, 89, 1, 93, 212, 203, 6, 185, 163, 89, 1, 158, 212, 203, 6, 112, 163, 89, 1, 204, 212, 203, 6, 65, 163, 89, 1, 239, 212, 203, 6, 18, 163, 89, 1, 22, 213, 203, 6, 219, 162, 89, 1, 68, 213, 203, 6, 148, 162, 89, 1, 121, 213, 203, 6, 70, 162, 89, 1, 186, 213, 203, 6, 237, 161, 89, 1, 4, 214, 203, 6, 76, 161, 89, 1, 122, 214, 203, 6, 203, 160, 89, 1, 212, 214, 203, 6, 97, 160, 89, 1, 5, 215, 203, 6, 1, 160, 89, 1, 30, 215, 203, 6, 170, 159, 89, 1, 79, 215, 203, 6, 92, 159, 89, 1, 137, 215, 203, 6, 250, 158, 89, 1, 217, 215, 203, 6, 126, 158, 89, 1, 58, 216, 203, 6, 244, 157, 89, 1, 150, 216, 203, 6, 110, 157, 89, 1, 227, 216, 203, 6, 226, 156, 89, 1, 45, 217, 203, 6, 70, 156, 89, 1, 121, 217, 203, 6, 164, 155, 89, 1, 195, 217, 203, 6, 0, 155, 89, 1, 1, 218, 203, 6, 92, 154, 89, 1, 46, 218, 203, 6, 200, 153, 89, 1, 77, 218, 203, 6, 56, 153, 89, 1, 113, 218, 203, 6, 152, 152, 89, 1, 153, 218, 203, 6, 248, 151, 89, 1, 188, 218, 203, 6, 92, 151, 89, 1, 220, 218, 203, 6, 207, 150, 89, 1, 248, 218, 203, 6, 81, 150, 89, 1, 28, 219, 203, 6, 219, 149, 89, 1, 54, 219, 203, 6, 103, 149, 89, 1, 77, 219, 203, 6, 1, 149, 89, 1, 101, 219, 203, 6, 165, 148, 89, 1, 124, 219, 203, 6, 67, 148, 89, 1, 139, 219, 203, 6, 229, 147, 89, 1, 155, 219, 203, 6, 141, 147, 89, 1, 173, 219, 203, 6, 47, 147, 89, 1, 186, 219, 203, 6, 209, 146, 89, 1, 201, 219, 203, 6, 109, 146, 89, 1, 225, 219, 203, 6, 8, 146, 89, 1, 255, 219, 203, 6, 158, 145, 89, 1, 27, 220, 203, 6, 37, 145, 89, 1, 60, 220, 203, 6, 165, 144, 89, 1, 99, 220, 203, 6, 46, 144, 89, 1, 131, 220, 203, 6, 205, 143, 89, 1, 155, 220, 203, 6, 127, 143, 89, 1, 162, 220, 203, 6, 66, 143, 89, 1, 164, 220, 203, 6, 19, 143, 89, 1, 170, 220, 203, 6, 251, 142, 89, 1, 165, 220, 203, 6, 240, 142, 89, 1, 159, 220, 203, 6, 233, 142, 89, 1, 156, 220, 203, 6, 230, 142, 89, 1, 155, 220, 203, 6, 228, 142, 89, 1, 155, 220, 203, 6, 226, 142, 89, 1, 155, 220, 203, 6, 215, 142, 89, 1, 155, 220, 203, 6, 194, 142, 89, 1, 158, 220, 203, 6, 167, 142, 89, 1, 162, 220, 203, 6, 138, 142, 89, 1, 161, 220, 203, 6, 107, 142, 89, 1, 161, 220, 203, 6, 65, 142, 89, 1, 165, 220, 203, 6, 9, 142, 89, 1, 168, 220, 203, 6, 162, 141, 89, 1, 161, 220, 203, 6, 240, 140, 89, 1, 134, 220, 203, 6, 165, 139, 89, 1, 69, 220, 203, 6, 150, 138, 89, 1, 9, 220, 203, 6, 184, 137, 89, 1, 208, 219, 203, 6, 245, 136, 89, 1, 155, 219, 203, 6, 65, 136, 89, 1, 107, 219, 203, 6, 151, 135, 89, 1, 58, 219, 203, 6, 239, 134, 89, 1, 254, 218, 203, 6, 74, 134, 89, 1, 196, 218, 203, 6, 184, 133, 89, 1, 149, 218, 203, 6, 14, 133, 89, 1, 93, 218, 203, 6, 87, 132, 89, 1, 32, 218, 203, 6, 157, 131, 89, 1, 223, 217, 203, 6, 203, 130, 89, 1, 155, 217, 203, 6, 250, 129, 89, 1, 88, 217, 203, 6, 51, 129, 89, 1, 24, 217, 203, 6, 113, 128, 89, 1, 211, 216, 203, 6, 181, 127, 89, 1, 130, 216, 203, 6, 247, 126, 89, 1, 56, 216, 203, 6, 62, 126, 89, 1, 243, 215, 203, 6, 140, 125, 89, 1, 174, 215, 203, 6, 230, 124, 89, 1, 110, 215, 203, 6, 92, 124, 89, 1, 55, 215, 203, 6, 14, 124, 89, 1, 9, 215, 203, 6, 229, 123, 89, 1, 229, 214, 203, 6, 190, 123, 89, 1, 210, 214, 203, 6, 141, 123, 89, 1, 196, 214, 203, 6, 82, 123, 89, 1, 173, 214, 203, 6, 39, 123, 89, 1, 160, 214, 203, 6, 8, 123, 89, 1, 150, 214, 203, 6, 230, 122, 89, 1, 141, 214, 203, 6, 182, 122, 89, 1, 137, 214, 203, 6, 123, 122, 89, 1, 140, 214, 203, 6, 46, 122, 89, 1, 133, 214, 203, 6, 195, 121, 89, 1, 110, 214, 203, 6, 80, 121, 89, 1, 77, 214, 203, 6, 154, 120, 89, 1, 17, 214, 203, 6, 11, 120, 89, 1, 230, 213, 203, 6, 157, 119, 89, 1, 198, 213, 203, 6, 83, 119, 89, 1, 173, 213, 203, 6, 50, 119, 89, 1, 163, 213, 203, 6, 34, 119, 89, 1, 158, 213, 203, 6, 5, 119, 89, 1, 147, 213, 203, 6, 219, 118, 89, 1, 127, 213, 203, 6, 167, 118, 89, 1, 109, 213, 203, 6, 89, 118, 89, 1, 87, 213, 203, 6, 244, 117, 89, 1, 57, 213, 203, 6, 126, 117, 89, 1, 21, 213, 203, 6, 224, 116, 89, 1, 230, 212, 203, 6, 152, 116, 89, 1, 213, 212, 203, 6, 87, 116, 89, 1, 216, 212, 203, 6, 249, 115, 89, 1, 210, 212, 203, 6, 128, 115, 89, 1, 173, 212, 203, 6, 18, 115, 89, 1, 124, 212, 203, 6, 160, 114, 89, 1, 76, 212, 203, 6, 77, 114, 89, 1, 43, 212, 203, 6, 19, 114, 89, 1, 20, 212, 203, 6, 203, 113, 89, 1, 254, 211, 203, 6, 139, 113, 89, 1, 240, 211, 203, 6, 83, 113, 89, 1, 225, 211, 203, 6, 28, 113, 89, 1, 194, 211, 203, 6, 226, 112, 89, 1, 157, 211, 203, 6, 179, 112, 89, 1, 131, 211, 203, 6, 137, 112, 89, 1, 112, 211, 203, 6, 63, 112, 89, 1, 86, 211, 203, 6, 237, 111, 89, 1, 59, 211, 203, 6, 167, 111, 89, 1, 37, 211, 203, 6, 99, 111, 89, 1, 22, 211, 203, 6, 14, 111, 89, 1, 8, 211, 203, 6, 159, 110, 89, 1, 237, 210, 203, 6, 238, 109, 89, 1, 186, 210, 203, 6, 244, 108, 89, 1, 104, 210, 203, 6, 102, 108, 89, 1, 54, 210, 203, 6, 141, 107, 89, 1, 237, 209, 203, 6, 225, 106, 89, 1, 173, 209, 203, 6, 65, 106, 89, 1, 123, 209, 203, 6, 171, 105, 89, 1, 81, 209, 203, 6, 254, 104, 89, 1, 32, 209, 203, 6, 87, 104, 89, 1, 242, 208, 203, 6, 171, 103, 89, 1, 193, 208, 203, 6, 14, 103, 89, 1, 144, 208, 203, 6, 131, 102, 89, 1, 98, 208, 203, 6, 2, 102, 89, 1, 61, 208, 203, 6, 129, 101, 89, 1, 19, 208, 203, 6, 0, 101, 89, 1, 224, 207, 203, 6, 126, 100, 89, 1, 176, 207, 203, 6, 250, 99, 89, 1, 123, 207, 203, 6, 116, 99, 89, 1, 58, 207, 203, 6, 242, 98, 89, 1, 254, 206, 203, 6, 115, 98, 89, 1, 199, 206, 203, 6, 241, 97, 89, 1, 136, 206, 203, 6, 111, 97, 89, 1, 67, 206, 203, 6, 244, 96, 89, 1, 240, 205, 203, 6, 109, 96, 89, 1, 157, 205, 203, 6, 217, 95, 89, 1, 63, 205, 203, 6, 64, 95, 89, 1, 213, 204, 203, 6, 180, 94, 89, 1, 99, 204, 203, 6, 54, 94, 89, 1, 248, 203, 203, 6, 204, 93, 89, 1, 145, 203, 203, 6, 127, 93, 89, 1, 64, 203, 203, 6, 56, 93, 89, 1, 14, 203, 203, 6, 233, 92, 89, 1, 214, 202, 203, 6, 161, 92, 89, 1, 160, 202, 203, 6, 96, 92, 89, 1, 112, 202, 203, 6, 53, 92, 89, 1, 64, 202, 203, 6, 254, 91, 89, 1, 19, 202, 203, 6, 173, 91, 89, 1, 231, 201, 203, 6, 73, 91, 89, 1, 172, 201, 203, 6, 181, 90, 89, 1, 63, 201, 203, 6, 11, 90, 89, 1, 172, 200, 203, 6, 119, 89, 89, 1, 33, 200, 203, 6, 219, 88, 89, 1, 130, 199, 203, 6, 74, 88, 89, 1, 220, 198, 203, 6, 197, 87, 89, 1, 57, 198, 203, 6, 66, 87, 89, 1, 146, 197, 203, 6, 194, 86, 89, 1, 231, 196, 203, 6, 69, 86, 89, 1, 59, 196, 203, 6, 202, 85, 89, 1, 142, 195, 203, 6, 89, 85, 89, 1, 220, 194, 203, 6, 248, 84, 89, 1, 46, 194, 203, 6, 142, 84, 89, 1, 118, 193, 203, 6, 29, 84, 89, 1, 186, 192, 203, 6, 172, 83, 89, 1, 253, 191, 203, 6, 55, 83, 89, 1, 64, 191, 203, 6, 196, 82, 89, 1, 128, 190, 203, 6, 83, 82, 89, 1, 193, 189, 203, 6, 225, 81, 89, 1, 10, 189, 203, 6, 117, 81, 89, 1, 73, 188, 203, 6, 3, 81, 89, 1, 136, 187, 203, 6, 195, 80, 89, 1, 35, 187, 203, 6, 109, 80, 89, 1, 154, 186, 203, 6, 47, 80, 89, 1, 19, 186, 203, 6, 17, 80, 89, 1, 93, 185, 203, 6, 242, 79, 89, 1, 255, 184, 203, 6, 184, 79, 89, 1, 202, 184, 203, 6, 125, 79, 89, 1, 191, 184, 203, 6, 78, 79, 89, 1, 218, 184, 203, 6, 57, 79, 89, 1, 241, 184, 203, 6, 40, 79, 89, 1, 8, 185, 203, 6, 4, 79, 89, 1, 69, 185, 203, 6, 216, 78, 89, 1, 157, 185, 203, 6, 178, 78, 89, 1, 253, 185, 203, 6, 141, 78, 89, 1, 88, 186, 203, 6, 72, 78, 89, 1, 196, 186, 203, 6, 217, 77, 89, 1, 43, 187, 203, 6, 107, 77, 89, 1, 113, 187, 203, 6, 255, 76, 89, 1, 169, 187, 203, 6, 160, 76, 89, 1, 227, 187, 203, 6, 87, 76, 89, 1, 25, 188, 203, 6, 24, 76, 89, 1, 68, 188, 203, 6, 206, 75, 89, 1, 119, 188, 203, 6, 144, 75, 89, 1, 162, 188, 203, 6, 71, 75, 89, 1, 214, 188, 203, 6, 235, 74, 89, 1, 27, 189, 203, 6, 66, 74, 89, 1, 155, 189, 203, 6, 161, 73, 89, 1, 5, 190, 203, 6, 24, 73, 89, 1, 98, 190, 203, 6, 174, 72, 89, 1, 177, 190, 203, 6, 85, 72, 89, 1, 239, 190, 203, 6, 16, 72, 89, 1, 42, 191, 203, 6, 215, 71, 89, 1, 92, 191, 203, 6, 132, 71, 89, 1, 140, 191, 203, 6, 25, 71, 89, 1, 199, 191, 203, 6, 161, 70, 89, 1, 15, 192, 203, 6, 39, 70, 89, 1, 97, 192, 203, 6, 169, 69, 89, 1, 180, 192, 203, 6, 50, 69, 89, 1, 247, 192, 203, 6, 221, 68, 89, 1, 45, 193, 203, 6, 174, 68, 89, 1, 84, 193, 203, 6, 138, 68, 89, 1, 118, 193, 203, 6, 114, 68, 89, 1, 139, 193, 203, 6, 96, 68, 89, 1, 152, 193, 203, 6, 74, 68, 89, 1, 172, 193, 203, 6, 43, 68, 89, 1, 190, 193, 203, 6, 9, 68, 89, 1, 197, 193, 203, 6, 229, 67, 89, 1, 186, 193, 203, 6, 195, 67, 89, 1, 163, 193, 203, 6, 150, 67, 89, 1, 130, 193, 203, 6, 108, 67, 89, 1, 102, 193, 203, 6, 71, 67, 89, 1, 77, 193, 203, 6, 28, 67, 89, 1, 54, 193, 203, 6, 226, 66, 89, 1, 44, 193, 203, 6, 150, 66, 89, 1, 64, 193, 203, 6, 41, 66, 89, 1, 118, 193, 203, 6, 173, 65, 89, 1, 191, 193, 203, 6, 250, 64, 89, 1, 64, 194, 203, 6, 129, 64, 89, 1, 181, 194, 203, 6, 21, 64, 89, 1, 52, 195, 203, 6, 149, 63, 89, 1, 163, 195, 203, 6, 12, 63, 89, 1, 253, 195, 203, 6, 137, 62, 89, 1, 67, 196, 203, 6, 23, 62, 89, 1, 111, 196, 203, 6, 192, 61, 89, 1, 123, 196, 203, 6, 90, 61, 89, 1, 93, 196, 203, 6, 231, 60, 89, 1, 29, 196, 203, 6, 119, 60, 89, 1, 196, 195, 203, 6, 25, 60, 89, 1, 117, 195, 203, 6, 219, 59, 89, 1, 78, 195, 203, 6, 186, 59, 89, 1, 71, 195, 203, 6, 181, 59, 89, 1, 83, 195, 203, 6, 189, 59, 89, 1, 106, 195, 203, 6, 200, 59, 89, 1, 129, 195, 203, 6, 211, 59, 89, 1, 154, 195, 203, 6, 218, 59, 89, 1, 181, 195, 203, 6, 224, 59, 89, 1, 210, 195, 203, 6, 231, 59, 89, 1, 238, 195, 203, 6, 242, 59, 89, 1, 8, 196, 203, 6, 253, 59, 89, 1, 33, 196, 203, 6, 8, 60, 89, 1, 54, 196, 203, 6, 27, 60, 89, 1, 66, 196, 203, 6, 47, 60, 89, 1, 66, 196, 203, 6, 57, 60, 89, 1, 57, 196, 203, 6, 57, 60, 89, 1, 43, 196, 203, 6, 50, 60, 89, 1, 25, 196, 203, 6, 37, 60, 89, 1, 5, 196, 203, 6, 23, 60, 89, 1, 241, 195, 203, 6, 13, 60, 89, 1, 225, 195, 203, 6, 4, 60, 89, 1, 215, 195, 203, 6, 253, 59, 89, 1, 207, 195, 203, 6, 247, 59, 89, 1, 200, 195, 203, 6, 241, 59, 89, 1, 196, 195, 203, 6, 234, 59, 89, 1, 194, 195, 203, 6, 229, 59, 89, 1, 192, 195, 203, 6, 224, 59, 89, 1, 189, 195, 203, 6, 219, 59, 89, 1, 187, 195, 203, 6, 215, 59, 89, 1, 184, 195, 203, 6, 214, 59, 89, 1, 180, 195, 203, 6, 216, 59, 89, 1, 178, 195, 203, 6, 220, 59, 89, 1, 172, 195, 203, 6, 222, 59, 89, 1, 163, 195, 203, 6, 222, 59, 89, 1, 150, 195, 203, 6, 219, 59, 89, 1, 134, 195, 203, 6, 213, 59, 89, 1, 119, 195, 203, 6, 204, 59, 89, 1, 109, 195, 203, 6, 195, 59, 89, 1, 103, 195, 203, 6, 190, 59, 89, 1, 97, 195, 203, 6, 189, 59, 89, 1, 93, 195, 203, 6, 190, 59, 89, 1, 88, 195, 203, 6, 192, 59, 89, 1, 85, 195, 203, 6, 191, 59, 89, 1, 86, 195, 203, 6, 184, 59, 89, 1, 89, 195, 203, 6, 174, 59, 89, 1, 92, 195, 203, 6, 158, 59, 89, 1, 93, 195, 203, 6, 137, 59, 89, 1, 99, 195, 203, 6, 111, 59, 89, 1, 108, 195, 203, 6, 82, 59, 89, 1, 119, 195, 203, 6, 50, 59, 89, 1, 130, 195, 203, 6, 16, 59, 89, 1, 140, 195, 203, 6, 236, 58, 89, 1, 149, 195, 203, 6, 200, 58, 89, 1, 156, 195, 203, 6, 159, 58, 89, 1, 164, 195, 203, 6, 106, 58, 89, 1, 177, 195, 203, 6, 53, 58, 89, 1, 191, 195, 203, 6, 4, 58, 89, 1, 205, 195, 203, 6, 219, 57, 89, 1, 220, 195, 203, 6, 191, 57, 89, 1, 236, 195, 203, 6, 175, 57, 89, 1, 249, 195, 203, 6, 167, 57, 89, 1, 5, 196, 203, 6, 162, 57, 89, 1, 13, 196, 203, 6, 8, 1, 10, 0, 0, 0, 77, 5, 112, 5, 216, 5, 222, 5, 121, 5, 9, 1, 10, 0, 0, 0, 8, 1, 1, 1, 240, 0, 239, 0, 0, 1, 1, 2, 106, 0, 0, 0, 5, 0, 0, 231, 7, 6, 25, 22, 52, 27, 104, 9, 0, 0, 0, 0, 0, 0, 0, 100, 124, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 133, 0, 0, 0, 108, 29, 0, 0, 63, 1, 0, 0, 252, 43, 248, 190, 4, 84, 78, 1, 0, 0, 0, 0, 0, 0, 225, 1, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 225, 1, 0, 0, 225, 1, 0, 0, 180, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 225, 1, 0, 0, 69, 74, 80, 85, 86, 90, 93, 94, 95, 96, 95, 95, 95, 96, 99, 101, 102, 102, 103, 104, 103, 103, 101, 99, 97, 96, 98, 99, 99, 92, 85, 84, 87, 91, 91, 92, 91, 92, 90, 88, 87, 85, 84, 83, 83, 83, 81, 86, 92, 92, 90, 89, 92, 92, 92, 91, 92, 92, 91, 89, 90, 91, 92, 93, 95, 97, 98, 94, 94, 99, 105, 108, 107, 108, 108, 106, 104, 102, 100, 100, 102, 103, 101, 100, 102, 103, 103, 102, 102, 101, 97, 94, 94, 96, 93, 92, 89, 85, 88, 87, 88, 90, 87, 89, 91, 94, 95, 95, 93, 92, 90, 88, 87, 89, 91, 90, 90, 93, 95, 95, 94, 96, 97, 98, 101, 105, 105, 104, 102, 99, 98, 96, 95, 97, 98, 98, 97, 96, 96, 97, 98, 99, 98, 98, 98, 98, 96, 94, 96, 97, 98, 100, 97, 96, 99, 106, 107, 109, 111, 114, 116, 117, 118, 119, 118, 116, 116, 115, 114, 111, 108, 103, 94, 88, 88, 88, 88, 89, 90, 92, 93, 90, 89, 89, 87, 87, 86, 87, 91, 94, 93, 93, 93, 97, 98, 99, 102, 103, 102, 106, 111, 115, 116, 119, 124, 124, 123, 120, 119, 117, 115, 115, 114, 112, 110, 109, 108, 107, 107, 107, 108, 108, 106, 105, 105, 105, 104, 102, 100, 98, 98, 98, 97, 95, 94, 92, 86, 84, 84, 86, 88, 92, 94, 95, 94, 96, 99, 103, 107, 108, 106, 104, 102, 101, 106, 109, 108, 106, 105, 104, 104, 103, 104, 104, 102, 101, 99, 97, 95, 93, 91, 90, 88, 86, 87, 88, 90, 90, 92, 92, 94, 95, 96, 94, 94, 93, 94, 93, 97, 98, 97, 95, 94, 95, 97, 102, 99, 99, 92, 93, 97, 96, 93, 92, 90, 83, 78, 81, 86, 89, 90, 90, 94, 96, 98, 100, 101, 103, 103, 103, 101, 102, 102, 102, 102, 102, 100, 92, 87, 88, 88, 94, 94, 96, 98, 99, 99, 104, 107, 107, 107, 105, 107, 110, 112, 114, 116, 115, 113, 112, 111, 107, 102, 102, 104, 108, 112, 115, 114, 112, 112, 112, 116, 120, 123, 123, 121, 119, 118, 120, 121, 121, 120, 120, 120, 119, 119, 118, 118, 118, 112, 104, 101, 98, 93, 89, 90, 91, 92, 93, 92, 90, 92, 96, 98, 102, 107, 112, 116, 118, 120, 123, 124, 124, 123, 120, 121, 119, 117, 117, 115, 115, 115, 117, 116, 116, 116, 116, 116, 116, 116, 116, 116, 114, 114, 113, 113, 115, 115, 112, 110, 110, 111, 111, 107, 103, 107, 112, 112, 110, 110, 110, 110, 113, 114, 114, 112, 107, 106, 107, 105, 102, 101, 104, 106, 107, 107, 107, 108, 110, 112, 113, 109, 103, 97, 93, 92, 93, 97, 100, 101, 103, 106, 103, 100, 102, 106, 108, 109, 107, 101, 3, 2, 16, 0, 0, 0, 108, 7, 254, 6, 105, 6, 184, 6, 94, 6, 162, 6, 178, 5, 102, 4, 4, 2, 194, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 84, 0, 67, 0, 67, 0, 67, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 16, 0, 0, 0, 188, 0, 200, 0, 219, 0, 209, 0, 220, 0, 211, 0, 246, 0, 63, 1, 6, 2, 194, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0, 0, 8, 2, 10, 0, 0, 0, 189, 4, 252, 3, 235, 3, 59, 4, 187, 2, 9, 2, 10, 0, 0, 0, 39, 1, 96, 1, 102, 1, 75, 1, 2, 2];
   // SportDataModel b = SportDataModel().fromBuffer(a);
   //  CreekProcedure.insertSportData(b.data);

  }
  
  static delAllData() async{
    Database database = await DBManager().db;
    await database.delete("HEART_RATE_DATA_HEAD");
    await database.delete("STRESS_DATA_HEAD");
    await database.delete("SPO_DATA_HEAD");
    await database.delete("SLEEP_DATA_HEAD");
    await database.delete("ACTIVITY_DATA_HEAD");
    await database.delete("NOISE_DATA_HEAD");
    await database.delete("SPORT_DATA_HEAD");
  }
  ///创建心率数据
  static createHeartRateData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 50;
    List<int> aValue = [70,80,100,50];
    for(int i = 0;i< day; i++){
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));
      int b = aValue[Random().nextInt(3)];
      Map hrMap =  {
        "threshold":12,
        "minute":60
      };
      List<dynamic> hrs = [
        hrMap,
        hrMap,
        hrMap,
        hrMap,
        hrMap
      ];
      List<dynamic> datas = [];
      int avlues = 0;
      int amin = 0;
      int amax = 0;

      for(int i = 0; i < 60; i++){
        int a = Random().nextInt(20);


        datas.add({
          "offset":1200,
          "value":a + b
        });
        avlues = avlues + a + b;
        if(amin == 0 && amax ==0){
          amin = a + b;
          amax = a + b;
        }else{
          if(a + b <= amin){
            amin = a + b;
          }else if(a + b > amax){
            amax = a + b;
          }
        }
      }
     int  average = avlues ~/ 60;
      Map<String,dynamic> map = {
       "userID" : 1,
       "deviceId" : "1",
        "creat_time":time.toString().substring(0,10),
        "offset_last":10*datas.length,
        "min":amin,
        "max":amax,
        "average":average,
        "silent_hr":Random().nextInt(10) + 70,
        "hr_interval":jsonEncode(hrs),
        "datas":jsonEncode(datas)
      };
      await database.insert("HEART_RATE_DATA_HEAD", map);
    }
  }
  ///压力数据
  static createStressData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 50;
    List<int> aValue = [10,20,30,40];
    for(int i = 0;i< day; i++){
      int amin = 0;
      int amax = 0;
      int low = 0;
      int usual = 0;
      int higher = 0;
      int veryHigh = 0;
      int average = 0;
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));

      int b = aValue[Random().nextInt(3)];
      List<dynamic> datas = [];
      for(int i = 0; i < 200; i++){
        int a = Random().nextInt(50);

        datas.add({
          "offset":5,
          "value":a + b
        });
        if(amin == 0 && amax ==0){
          amin = a + b;
          amax = a + b;
        }else{
          if(a + b <= amin){
            amin = a + b;
          }else if(a + b > amax){
            amax = a + b;
          }
        }
        average = average + a + b;
        if(a + b >= 1 && a + b <= 29){
          low = low + 1;
        }
        if(a + b >= 30 && a + b <= 59){
          usual = usual + 1;
        }
        if(a + b >= 60 && a + b <= 79){
          higher = higher + 1;
        }
        if(a + b >= 79&& a + b <= 99){
          veryHigh = veryHigh + 1;
        }
      }
      int all = low + usual + higher + veryHigh;
      low =  ((low / all) * 100).toInt();
      usual =  ((usual / all) * 100).toInt();
      higher =  ((higher / all) * 100).toInt();
      veryHigh =  ((veryHigh / all) * 100).toInt();
      if(low+usual+higher+veryHigh < 100 && low+usual+higher+veryHigh > 0){
        int maxValue = [low,usual,higher,veryHigh].reduce(max);
        if(maxValue == low){
          low = low + (100 - (low+usual+higher+veryHigh));
        }else if(maxValue == usual){
          usual = usual + (100 - (low+usual+higher+veryHigh));
        }else if(maxValue == higher){
          higher = higher + (100 - (low+usual+higher+veryHigh));
        }else if(maxValue == veryHigh){
          veryHigh = veryHigh + (100 - (low+usual+higher+veryHigh));
        }
      }
      if(average != 0){
        average = average ~/ 200;
      }
      Map<String,dynamic> map = {
        "userID" : 1,
        "deviceId" : "1",
        "creat_time":time.toString().substring(0,10),
        "offset_last":1000,
        "average":average,
        "min":amin,
        "max":amax,
        "low":low,
        "usual":usual,
        "higher":higher,
        "veryHigh":veryHigh,
        "datas":jsonEncode(datas)
      };
      await database.insert("STRESS_DATA_HEAD", map);
    }
  }

  ///血氧数据
  static createSpoData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 50;
    List<int> aValue = [90,91,92,93];
    for(int i = 0;i< day; i++){
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));
      int b = aValue[Random().nextInt(3)];
      List<dynamic> datas = [];
      int avlues = 0;
      int amin = 0;
      int amax = 0;
      for(int i = 0; i < 200; i++){
        int a = Random().nextInt(7);
        datas.add({
          "offset":5,
          "value":a + b
        });
        avlues = avlues + a + b;
        if(amin == 0 && amax ==0){
          amin = a + b;
          amax = a + b;
        }else{
          if(a+b <= amin){
            amin = a + b ;
          }else if(a+b > amax){
            amax = a + b;
          }
        }
      }
      int  average = avlues ~/ 200;

      Map<String,dynamic> map = {
        "userID" : 1,
        "deviceId" : "1",
        "creat_time":time.toString().substring(0,10),
        "offset_last":1000,
        "min":amin,
        "max":amax,
        "average":average,
        "datas":jsonEncode(datas)
      };
      await database.insert("SPO_DATA_HEAD", map);
    }
  }

  ///噪音数据
  static createNoiseData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 50;
    List<int> aValue = [10,20,50,70];
    for(int i = 0;i< day; i++){
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));
      int b = aValue[Random().nextInt(3)];
      List<dynamic> datas = [];
      int average = 0;
      int amin = 0;
      int amax = 0;
      for(int i = 0; i < 200; i++){
        int a = Random().nextInt(40);
        datas.add({
          "offset":5,
          "value":a + b
        });
        average = average + a + b;
        if(amin == 0 && amax ==0){
          amin = a + b;
          amax = a + b;
        }else{
          if(a+b <= amin){
            amin = a + b;
          }else if(a+b > amax){
            amax = a + b;
          }
        }
      }
      average = average ~/ 200;
      Map<String,dynamic> map = {
        "userID" : 1,
        "deviceId" : "1",
        "creat_time":time.toString().substring(0,10),
        "offset_last":1000,
        "min":amin,
        "max":amax,
        "average":average,
        "datas":jsonEncode(datas)
      };
      await database.insert("NOISE_DATA_HEAD", map);
    }
  }

  ///睡眠数据
  static createSleepData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 50;
    for(int i = 0;i< day; i++){
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));
      List<dynamic> datas = [];
      int c = 1;
      List<int> all = [10,20,30,40];
      int b = all[Random().nextInt(3)];
      for(int i = 0; i < 10; i++){
        if(i == b){
          c = Random().nextInt(3) + 1;
          b = all[Random().nextInt(3)];
        }
        int a = Random().nextInt(3) + 1;
        datas.add({
          "duration":b,
          "stage":a
        });
      }
      DateTime sleepTime = time.add(const Duration(days: -1));
      DateTime sleep = DateTime(sleepTime.year,sleepTime.month,sleepTime.day,23,30,0);
      DateTime getup = DateTime(time.year,time.month,time.day,6,30,0);
      Map<String,dynamic> map = {
        "userID" : 1,
        "deviceId" : "1",
        "get_up_date":time.toString().substring(0,10),
        "offset_last":200,
        "fall_asleep_time":sleep.toString().substring(0,19),
        "get_up_time":getup.toString().substring(0,19),
        "total_sleep_time_mins":360,
        "wake_mins":70,
        "light_sleep_mins":90,
        "deep_sleep_mins":90,
        "rem_mins":110,
        "wake_count":3,
        "light_sleep_count":8,
        "deep_sleep_count":10,
        "rem_count":5,
        "sleep_score":80,
        "datas":jsonEncode(datas)
      };
      await database.insert("SLEEP_DATA_HEAD", map);
      DateTime sleep2 = DateTime(time.year,time.month,time.day,13,30,0);
      DateTime getup2 = DateTime(time.year,time.month,time.day,18,30,0);
      Map<String,dynamic> map2 = {
        "userID" : 1,
        "deviceId" : "1",
        "get_up_date":time.toString().substring(0,10),
        "offset_last":200,
        "fall_asleep_time":sleep2.toString().substring(0,19),
        "get_up_time":getup2.toString().substring(0,19),
        "total_sleep_time_mins":350,
        "wake_mins":70,
        "light_sleep_mins":90,
        "deep_sleep_mins":90,
        "rem_mins":100,
        "wake_count":3,
        "light_sleep_count":8,
        "deep_sleep_count":10,
        "rem_count":5,
        "sleep_score":80,
        "datas":jsonEncode(datas)
      };
      await database.insert("SLEEP_DATA_HEAD", map2);
    }
  }

  ///活动数据
  static createActivatyData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 50;
    List<int> stepValue = [30,200,300,500,150,80,90,0,0,0,0];
    for(int i = 0;i< day; i++){
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));
      List<dynamic> datas = [];
      int as = 0;
      int bs = 0;
      int cs = 0;
      int ds = 0;
      int fs = 0;
      int gs = 0;
      int hs = 0;
      for(int i = 0; i < 70; i++){
        int a = Random().nextInt(300) + stepValue[Random().nextInt(10)];
        int b = Random().nextInt(15);
        int c = Random().nextInt(50) + 20;
        int d = Random().nextInt(50) + 20;
        int f = Random().nextInt(300) + 400;
        int g = Random().nextInt(15);
        int h = Random().nextInt(15);
        as = as + a;
        bs = bs + b;
        cs = cs + c;
        ds = ds + d;
        fs = ds + f;
        gs = gs + g;
        hs = hs + h;
        datas.add({
          "step_count":a,
          "exercise_min":b,
          "activity_calories":c,
          "rest_calories":d,
          "distance":f,
          "stand_time":g,
          "wear_time":h
        });
      }
      Map<String,dynamic> map = {
        "userID" : 1,
        "deviceId" : "1",
        "creat_time":time.toString().substring(0,10),
        "offset_last":200,
        "total_step":as,
        "total_exercise_min":bs,
        "total_activity_calories":cs,
        "total_rest_calories":ds,
        "total_distances":fs,
        "total_stand_hour":gs,
        "activity_item_count":hs,
        "datas":jsonEncode(datas)
      };
      await database.insert("ACTIVITY_DATA_HEAD", map);
    }
  }

  ///运动数据
  static createSportData() async{
    Database database = await DBManager().db;
    DateTime dateTime = DateTime.now();
    int day = dateTime.day + 20;
    for(int i = 0;i< day; i++){
      int days = (day-(i+1));
      DateTime time = DateTime.now().add(Duration(days: -days));
      DateTime startTime1 = DateTime(time.year,time.month,time.day,8,0,0);
      DateTime endTime1 = DateTime(time.year,time.month,time.day,9,0,0);
      DateTime startTime2 = DateTime(time.year,time.month,time.day,13,0,0);
      DateTime endTime2 = DateTime(time.year,time.month,time.day,14,0,0);
      List<int> hrValueItem = [];
      List<int> kmSpeedItem = [];
      List<int> stepFrequencyItem = [];
      List<int> kmPaceItem = [];
      List<int> stepStrideItem = [];
      List<dynamic> trailData = [];
      for(int i = 0 ; i< 5; i++){
        hrValueItem.add(Random().nextInt(120)+70);
        kmSpeedItem.add(Random().nextInt(3));
        stepFrequencyItem.add(Random().nextInt(40)+40);
        kmPaceItem.add(Random().nextInt(10));
        stepStrideItem.add(Random().nextInt(20)+20);
      }
      for(int i = 0 ; i< 1000; i++){
        trailData.add({
          "latitude":22563666+Random().nextInt(10000)+60000,
          "longitude":114050888
        });
      }
      List<int> l = [2,4,5];
      Map<String,dynamic> map = {
        "userID" : 1,
        "deviceId" : "1",
        "creatTime":time.toString().substring(0,10),
        "startTime":startTime1.toString().substring(0,19),
        "endTime":endTime1.toString().substring(0,19),
        "sportType":0,
        "isConnectApp":1,
        "sportStartType":2,
        "durations":3600,
        "goalType":Random().nextInt(7),
        "goalData":200,
        "avgHrValue":80,
        "maxHrValue":98,
        "minHrValue":70,
        "warmUpTime":1000,
        "fatBurningTime":1000,
        "aerobicExerciseTime":1000,
        "anaerobicExerciseTime":1000,
        "extremeExerciseTime":1000,
        "totalStep":1000,
        "totalCalories":1000,
        "totalDistance":1000,
        "avgKmPace":1000,
        "fastKmPace":1000,
        "avgSpeed":1000,
        "fastSpeed":1000,
        "avgStepFrequency":100,
        "maxStepFrequency":100,
        "avgStepStride":10,
        "maxStepStride":10,
        "trainingEffect":20,
        "vozmax":70,
        "grade":100,
        "recoveryTime":10,
        "hrItemCount":10,
        "kmSpeedCount":20,
        "paceCount":70,
        "stepFrequencyCount":100,
        "stepStrideCount":10,
        "hrValueItem":jsonEncode(hrValueItem),
        "kmSpeedItem":jsonEncode(kmSpeedItem),
        "stepFrequencyItem":jsonEncode(stepFrequencyItem),
        "kmPaceItem":jsonEncode(kmPaceItem),
        "stepStrideItem":jsonEncode(stepStrideItem),
        "trailData":jsonEncode(trailData),

      };
      await database.insert("SPORT_DATA_HEAD", map);

      // Map<String,dynamic> map1 = {
      //   "userID" : 1,
      //   "deviceId" : "1",
      //   "creatTime":time.toString().substring(0,10),
      //   "startTime":startTime2.toString().substring(0,19),
      //   "endTime":endTime2.toString().substring(0,19),
      //   "sportType":Random().nextInt(80),
      //   "isConnectApp":1,
      //   "sportStartType":2,
      //   "durations":3600,
      //   "goalType":Random().nextInt(7),
      //   "goalData":200,
      //   "avgHrValue":80,
      //   "maxHrValue":98,
      //   "minHrValue":70,
      //   "warmUpTime":1000,
      //   "fatBurningTime":1000,
      //   "aerobicExerciseTime":1000,
      //   "anaerobicExerciseTime":1000,
      //   "extremeExerciseTime":1000,
      //   "totalStep":1000,
      //   "totalCalories":1000,
      //   "totalDistance":1000,
      //   "avgKmPace":1000,
      //   "fastKmPace":1000,
      //   "avgSpeed":1000,
      //   "fastSpeed":1000,
      //   "avgStepFrequency":100,
      //   "maxStepFrequency":100,
      //   "avgStepStride":10,
      //   "maxStepStride":10,
      //   "trainingEffect":20,
      //   "vozmax":70,
      //   "grade":100,
      //   "recoveryTime":10,
      //   "hrItemCount":10,
      //   "kmSpeedCount":20,
      //   "paceCount":70,
      //   "stepFrequencyCount":100,
      //   "stepStrideCount":10,
      //   "hrValueItem":jsonEncode(hrValueItem),
      //   "kmSpeedItem":jsonEncode(kmSpeedItem),
      //   "stepFrequencyItem":jsonEncode(stepFrequencyItem),
      //   "kmPaceItem":jsonEncode(kmPaceItem),
      //   "stepStrideItem":jsonEncode(stepStrideItem),
      //   "trailData":jsonEncode(trailData),
      // };
      // await database.insert("SPORT_DATA_HEAD", map1);
    }
  }

}

